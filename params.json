{
  "name": "Take-home-exam-5-csis-604",
  "tagline": "",
  "body": "### Part 1 - Leader and clock synchronization\r\n1. Implement a leader election algorithm using the ring algorithm. You must have at least four virtual machines. Three for the front-end tier or client and one for the backend. You must select the lead from among these three. You need to be creative as to how elections are initiated. Leaders can resign at any time and other leader needs to be chosen.\r\n2. The leader will serve as the time server. Specifically, implement the Berkeley clock synchronization algorithm. Each machine neds to maintain a clock offset variable that represents the amount of time by which the clock is adjusted. Do not actually adjust the system clock by this value. Just provide a function to timestamp any request by simply reading the system time and then adjusting it with this offset.\r\n\r\n### Part 2: Distributed mutual exclusion\r\n1. Problem: multiple front-end nodes can read and write to the database at the same time. We need a read-write lock to protect us. A read-write lock is a single lock that you can acquire either in read more or write mode. In this part, you will implement a distributed read-write lock using the leader. Each write message requires the front-end process to get a write lock on the database. No other front-end process may access the database for reading or writing when someone holds a write lock. Similarly, a retrieve message requires a read lock on the database. Multiple read-locks can be concurrently held on the database, but no write locks can be granted if at least one process holds a read lock. Thus, read locks allow concurrent access to multiple readers, while write locks only allow mutually exclusive access. For your database server, you can implement and protect a simple file that both clients are trying to read and write to. ",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}